% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/problem2.R
\name{p2}
\alias{p2}
\alias{fibSeq}
\alias{fibStart}
\alias{fibNext}
\title{Problem 2 - Even Fibonacci numbers}
\usage{
p2()

fibSeq(x, lim = 100, value = 1e+06)

fibStart(x)

fibNext(x)
}
\arguments{
\item{x}{an integer number for which the following number in the Fibonacci sequence will be generated

\loadmathjax}

\item{lim}{a length limit of the Fibonacci sequence to return}

\item{value}{a maximum value of the Fibonacci sequence to calculate to}
}
\value{
a double vector
}
\description{
This is a solution to \href{https://projecteuler.net/problem=2}{Euler problem 2}.

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
}
\section{Functions}{
\itemize{
\item \code{fibSeq}: a function to generate the Fibonacci sequence

\item \code{fibStart}: a function to generate the beginning of the Fibonacci sequence

\item \code{fibNext}: a function to generate the next number in a Fibonacci sequence
}}

\section{FibSeq}{
This function does not discriminate against starting integers. This means any number may be input
as \code{x} and a Fibonacci-like sequence will be calculated from that starting point. The actual
Fibonacci sequence will only be generated by inputting a number actually in the Fibonacci sequence.
}

\section{FibStart}{
This function generates the first three numbers of the Fibonacci sequence as necessary (0, 1, 1).
This is necessary because these numbers can not be generated by utilizing the golden ratio (see
\link[projecteuler]{fibNext} for further detail). If given a number other than 0 or 1, this function
will simply return that number.
}

\section{FibNext}{
This function generates the next number of the Fibonacci sequence given a preceding number, \code{x}).
The ratio of any two consecutive entries in the Fibonacci sequence rapidly approaches \mjeqn{\varphi}{ascii}.
\code{x} is multipled by \mjeqn{\varphi}{ascii} and rounded to the nearest integer to obtain the next number in sequence.

Note this will not give the correct next number if \code{x = 0} or \code{x = 1}.

\mjdeqn{ \varphi=\frac{1+\sqrt{5}}2 }{ascii}
}

\examples{
p2()

fibSeq(0)

fibStart(0)
fibStart(1)
fibStart(5)

fibNext(3)
fibNext(34)

}
